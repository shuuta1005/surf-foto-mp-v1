generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String     @default("NO_NAME")
  email         String     @unique(map: "user_email_idx")
  emailVerified DateTime?
  image         String?
  password      String?
  role          String     @default("user")
  local_break   Json?      @db.Json
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account?
  carts         Cart[]
  galleries     Gallery[]  @relation("PhotographerGalleries")
  Purchase      Purchase[]
  sessions      Session[]
}

model PendingUser {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  hashedPassword String
  // Store a one-time verification token and expiry
  token          String    @unique
  expires        DateTime
  // Throttling + observability
  lastSentAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([email])
  @@index([token])
  @@index([expires])
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String     @id @default(uuid())
  sessionCartId String     @unique
  userId        String?
  totalPrice    Int
  taxPrice      Int?
  afterTaxPrice Int?
  createdAt     DateTime   @default(now())
  user          User?      @relation(fields: [userId], references: [id])
  items         CartItem[]
}

model CartItem {
  id               String    @id @default(uuid())
  cartId           String
  photoId          String
  photoUrl         String
  price            Int
  location         String?
  takenAt          DateTime?
  photographerId   String?
  photographerName String?
  slug             String?
  cart             Cart      @relation(fields: [cartId], references: [id])
}

model Gallery {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  area           String
  date           DateTime
  isPublic       Boolean  @default(false)
  photographerId String
  prefecture     String
  surfSpot       String
  coverPhoto     String?
  sessionTime    String?
  photographer   User     @relation("PhotographerGalleries", fields: [photographerId], references: [id])
  photos         Photo[]
}

model Photo {
  id          String     @id @default(uuid())
  galleryId   String
  photoUrl    String
  uploadedAt  DateTime   @default(now())
  //isCover     Boolean    @default(false)
  originalUrl String?
  gallery     Gallery    @relation(fields: [galleryId], references: [id])
  Purchase    Purchase[]
}

model Purchase {
  id              String   @id @default(uuid())
  userId          String
  photoId         String
  createdAt       DateTime @default(now())
  paymentIntentId String? // ðŸ›  Rename if needed to match webhook (was previously stripePaymentIntentId)
  refunded        Boolean  @default(false) // âœ… Add this

  photo Photo @relation(fields: [photoId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}
