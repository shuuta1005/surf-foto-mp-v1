generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  local_break   Json?     @db.Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  carts    Cart[]

  // ðŸ‘‡ This line is new
  galleries Gallery[] @relation("PhotographerGalleries")
}

model Account {
  id                String  @id @default(uuid()) // âœ… Added ID for better management
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // âœ… More efficient indexing
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String     @id @default(uuid())
  sessionCartId String     @unique
  userId        String?
  user          User?      @relation(fields: [userId], references: [id])
  items         CartItem[]
  totalPrice    Int
  taxPrice      Int?
  afterTaxPrice Int?
  createdAt     DateTime   @default(now())
}

model CartItem {
  id               String    @id @default(uuid())
  cartId           String
  cart             Cart      @relation(fields: [cartId], references: [id])
  photoId          String
  photoUrl         String
  price            Int
  location         String?
  takenAt          DateTime?
  photographerId   String?
  photographerName String?
  slug             String?
}

// -----------------------NEW MODELS---------------------------------

model Gallery {
  id         String   @id @default(uuid())
  prefecture String
  area       String
  surfSpot   String
  date       DateTime
  isPublic   Boolean  @default(false)

  photographerId String
  photographer   User   @relation("PhotographerGalleries", fields: [photographerId], references: [id])

  photos    Photo[]
  createdAt DateTime @default(now())
}

model Photo {
  id        String  @id @default(uuid())
  galleryId String
  gallery   Gallery @relation(fields: [galleryId], references: [id])

  photoUrl    String // âœ… Blurred + watermarked (shown publicly)
  originalUrl String? // âœ… High-res version (downloadable post-purchase)

  uploadedAt DateTime @default(now())
  isCover    Boolean  @default(false)
}
