// lib/db
// ðŸ“Œ Optional (Later): Use Neon Adapter
// When youâ€™re ready for production with Neon, weâ€™ll:

// Keep the singleton pattern

// But inject the Neon adapter into the PrismaClient inside lib/db.ts

// You're not there yet, but weâ€™ll handle it when the time comes ðŸ”§

import { PrismaClient } from "@prisma/client";

const globalForPrisma = globalThis as unknown as {
  //globalThis is the global object (like a universal variable shared across modules in dev)
  prisma: PrismaClient | undefined;
};

export const prisma = globalForPrisma.prisma ?? new PrismaClient();

if (process.env.NODE_ENV !== "production") {
  globalForPrisma.prisma = prisma;
}

// ðŸ§  In short: What is this file doing?
// It gives you a safe, shared, and singleton Prisma instance that:

// Wonâ€™t crash with too many connections

// Wonâ€™t get recreated every time you refresh the app in dev

// Works great in both development and production
